// <auto-generated />
using System;
using Bibliotek_Labb1.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Bibliotek_Labb1.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220831121329_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Bibliotek_Labb1.Models.Book", b =>
                {
                    b.Property<int>("BookID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOnLoan")
                        .HasColumnType("bit");

                    b.HasKey("BookID");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            BookID = 1,
                            Author = "J.R.R. Tolkien",
                            BookName = "The Hobbit",
                            IsOnLoan = true
                        },
                        new
                        {
                            BookID = 2,
                            Author = "J.R.R. Tolkien",
                            BookName = "The Fellowship of the Ring",
                            IsOnLoan = true
                        },
                        new
                        {
                            BookID = 3,
                            Author = "J.R.R. Tolkien",
                            BookName = "The Two Towers",
                            IsOnLoan = false
                        },
                        new
                        {
                            BookID = 4,
                            Author = "J.R.R. Tolkien",
                            BookName = "The Return of the King",
                            IsOnLoan = true
                        },
                        new
                        {
                            BookID = 5,
                            Author = "Harper Lee",
                            BookName = "To Kill A Mockingbird",
                            IsOnLoan = false
                        },
                        new
                        {
                            BookID = 6,
                            Author = "F.Scott Fitzgerald",
                            BookName = "The Great Gatsby",
                            IsOnLoan = false
                        },
                        new
                        {
                            BookID = 7,
                            Author = "Charles Dickens",
                            BookName = "Oliver Twist",
                            IsOnLoan = true
                        },
                        new
                        {
                            BookID = 8,
                            Author = "Mary Shelley",
                            BookName = "Frankenstein",
                            IsOnLoan = false
                        },
                        new
                        {
                            BookID = 9,
                            Author = "Emily Brönte",
                            BookName = "Wuthering Heights",
                            IsOnLoan = false
                        },
                        new
                        {
                            BookID = 10,
                            Author = "Heman Melville",
                            BookName = "Moby Dick",
                            IsOnLoan = true
                        },
                        new
                        {
                            BookID = 11,
                            Author = "Toni Morrison",
                            BookName = "Song of Solomon",
                            IsOnLoan = false
                        });
                });

            modelBuilder.Entity("Bibliotek_Labb1.Models.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerID");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerID = 1,
                            Adress = "Skamman 13",
                            City = "Varberg",
                            Email = "HannaH@gmail.com",
                            FullName = "Hanna Lahtinen",
                            ZipCode = "43246"
                        },
                        new
                        {
                            CustomerID = 2,
                            Adress = "Storgatan 6",
                            City = "Varberg",
                            Email = "J.Gergi@gmail.com",
                            FullName = "Jennifer Gergi",
                            ZipCode = "43246"
                        },
                        new
                        {
                            CustomerID = 3,
                            Adress = "Varberg",
                            City = "Storgatan 2",
                            Email = "Winborg.98@hotmail.com",
                            FullName = "Markus Winborg",
                            ZipCode = "43246"
                        },
                        new
                        {
                            CustomerID = 4,
                            Adress = "Skammerhult 16",
                            City = "Nösslinge",
                            Email = "SofiaKarlsson98@gmail.com",
                            FullName = "Sofia Karlsson",
                            PhoneNumber = "0738428987",
                            ZipCode = "43299"
                        });
                });

            modelBuilder.Entity("Bibliotek_Labb1.Models.CustomerBook", b =>
                {
                    b.Property<int>("CustomerBookID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BookBorrowed")
                        .HasColumnType("datetime2");

                    b.Property<int>("BookID")
                        .HasColumnType("int");

                    b.Property<DateTime>("BookReturned")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.HasKey("CustomerBookID");

                    b.HasIndex("BookID");

                    b.HasIndex("CustomerID");

                    b.ToTable("CustomerBooks");
                });

            modelBuilder.Entity("Bibliotek_Labb1.Models.CustomerBook", b =>
                {
                    b.HasOne("Bibliotek_Labb1.Models.Book", "Book")
                        .WithMany("CustomerBook")
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bibliotek_Labb1.Models.Customer", "Customer")
                        .WithMany("CustomerBook")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
